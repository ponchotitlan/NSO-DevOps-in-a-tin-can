#!/usr/bin/env groovy
/**
 * NSO-DevOps-in-a-tin-can
 * Author: @ponchotitlan
 *
 * Declarative script of the Jenkins pipeline stages for NSO Use Case testing.
 * The setup of Jenkins and Gitlab-CE is required as per described in the following repository:
 * 
 * https://github.com/ponchotitlan/NSO-DevOps-in-a-tin-can
 */

pipeline {
    agent any
    stages {
       stage('NSO setup') {
        /*
         * Jenkins will pull the NSO Docker image indicated in the yaml configuration file
         * and spin up a container ready to be used for testing
         */
         steps{
            script{
              def ContainerHandler = load "pipeline_utils/ContainerUtils.Groovy"
              ContainerHandler.spinNSOContainer("cisco-nso-dev:6.0-root","nso6.0")
            }
         }          
       }

       stage('NEDs setup') {
        /*
         * Jenkins will load the required NED files indicated in the yaml configuration
         * file into the previously created NSO container and issue a packages reload.
         * The NEDs must me present in the ${HOME}/nso_cicd_tincan/neds location.
         */
        steps{
          script{
            String[] NEDS = ["cisco-ios-cli-6.88"]
            def ContainerHandler = load "pipeline_utils/ContainerUtils.Groovy"
            ContainerHandler.loadNEDs(NEDS,"nso6.0")
          }
        }
       }

      stage('Packages setup') {
        /*
          * Jenkins will load the NSO service package to be tested as indicated in the
          * yaml testbed file into the previously created NSO container. The packages
          * will be compiled and added to NSO. A packages reload will be issued.
          * The service package must be present in this repository under
          * the root location.
          */
        steps{
          script{
            String[] packages = ["router-rfs"]
            def ContainerHandler = load "pipeline_utils/ContainerUtils.Groovy"
            ContainerHandler.loadServicePackages(packages,"nso6.0")
          }
        }
      }      

      stage('Testbed setup') {
      /*
        * Jenkins will create the required NETSIM devices and
        * onboard them in the NSO container. Jenkins will also
        * copy the python testbed from the repository to the
        * NSO container
        */
        steps{
          script{
            Map devices = ["cisco-ios-cli-6.88":"test-ios-"]
            def ContainerHandler = load "pipeline_utils/ContainerUtils.Groovy"
            ContainerHandler.spinTestDevices(devices,"nso6.0")
            ContainerHandler.onboardTestDevices("nso6.0")
          }
        }
      } 

      stage('Test execution') {
      /*
        * Jenkins will execute the tests specified in the yaml testbed against the
        * previously created NSO container. The test files must be present in the
        * /tests folder of this repository
        */
        steps{
          script{
            def ContainerHandler = load "pipeline_utils/ContainerUtils.Groovy"
            ContainerHandler.runTestBed()
          }
        }
      }

      stage('Artifacts creation') {
      /*
        * Jenkins will zip the compiled service package and upload it 
        * into the SCR system
        */
        steps{
          script{
            String[] packages = ["router-rfs"]
            def ContainerHandler = load "pipeline_utils/ContainerUtils.Groovy"
            ContainerHandler.createArtifacts(packages,'nso6.0')
          }
        }
      }

      stage('Artifacts publishing') {
      /*
        * Jenkins will zip the compiled service package and upload it 
        * into the SCR system
        */
        steps{
          script{
           def ContainerHandler = load "pipeline_utils/ContainerUtils.Groovy"
           ContainerHandler.publishArtifacts()
          }
        }
      } 
      
      stage('Workspace cleanup') {
      /*
        * Jenkins will destroy the created NSO container used throughout the process
        */
        steps{
        script{
          def ContainerHandler = load "pipeline_utils/ContainerUtils.Groovy"
          ContainerHandler.destroyNSOContainer("nso6.0")
        }
        }
      }
    }
 }