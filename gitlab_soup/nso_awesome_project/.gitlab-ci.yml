# NSO-DevOps-in-a-tin-can
# Author: @ponchotitlan
# 
# Pipeline definition for gitlab-runner
#
# The pipeline defined in this file aims to provide an example of the workflow for testing and deploying a NSO service package through different configuration means

include:
  - '/pipeline_utils/environments.yml'

variables:
  STAGING_NSO_CONTAINER: '$GITLAB_USER_LOGIN-NSO-$STAGING_NSO_VERSION'
  STAGING_NETSIM_CONTAINER: '$STAGING_NETSIM_PREFIX-1'

stages:
  - build
  - test
  - deliver
  - deploy
  - cleanup

nso-staging-üèóÔ∏è:
  stage: build
  script:
    - echo "(Build üèóÔ∏è) Creating docker network"
    - docker network create nsotestenvnetwork 

    - echo "(Build üèóÔ∏è) Spinning up a NSO container for version v.$STAGING_NSO_VERSION (Docker image $STAGING_NSO_DOCKER_IMAGE)"
    - docker run -itd --network nsotestenvnetwork --env-file pipeline_utils/nso_setup.list --platform=linux/amd64 -p 8080:80 --name $STAGING_NSO_CONTAINER $STAGING_NSO_DOCKER_IMAGE
    - sleep 200

packages-staging-üèóÔ∏è:
  stage: build
  when: on_success
  script:
    - echo "(Build üèóÔ∏è) Loading and compiling packages in the NSO container"
    - cd packages && for PACKAGE in *; do docker cp $PACKAGE $STAGING_NSO_CONTAINER:/nso/run/packages; done
    - cd ..

    - echo "(Build üèóÔ∏è) Executing packages reload in the NSO container"
    - cd packages && for PACKAGE in *; do docker exec -i $STAGING_NSO_CONTAINER bash -l -c "cd /nso/run/packages/$PACKAGE/src/ && make clean all"; done
    - cd ..
    - docker exec -i $STAGING_NSO_CONTAINER bash -l -c "echo 'packages reload' | ncs_cli -Cu admin"

testbed-staging-üèóÔ∏è:
  stage: build
  when: on_success
  script:
    - echo "(Build üèóÔ∏è) Loading authgroups for netsims in the NSO container"
    - docker cp pipeline_utils/netsim_authgroup.xml $STAGING_NSO_CONTAINER:/
    - docker exec -i $STAGING_NSO_CONTAINER bash -l -c "ncs_load -l -m netsim_authgroup.xml"

    - echo "(Build üèóÔ∏è) Spinning up a NETSIM container (Docker image $STAGING_NETSIM_DOCKER_IMAGE)"
    - docker run -td --network-alias $STAGING_NETSIM_CONTAINER --hostname $STAGING_NETSIM_CONTAINER --platform=linux/amd64 -p 222:22 --network nsotestenvnetwork --name $STAGING_NETSIM_CONTAINER $STAGING_NETSIM_DOCKER_IMAGE
    - echo "(Build üèóÔ∏è) Waiting for the NETSIM container to initialize ..."
    - sleep 150

    - echo "(Build üèóÔ∏è) Generating NETSIM configurations xml"
    - docker exec -i $STAGING_NETSIM_CONTAINER bash -l -c "cd /opt/ncs/current/ && ncs-netsim ncs-xml-init > devices.xml"
    - docker cp $STAGING_NETSIM_CONTAINER:/opt/ncs/current/devices.xml .
    - NETSIM_IP=$(docker inspect -f '{{ .NetworkSettings.Networks.nsotestenvnetwork.IPAddress}}' $STAGING_NETSIM_CONTAINER)
    - xmlstarlet edit --inplace -N x=http://tail-f.com/ns/ncs --update '/x:devices/x:device/x:address' --value $NETSIM_IP devices.xml

    - echo "(Build üèóÔ∏è) Loading NETSIM configurations xml in the NSO container"
    - docker cp devices.xml $STAGING_NSO_CONTAINER:/

    - echo "(Build üèóÔ∏è) Onboarding test devices in the NSO container"
    - docker exec -i $STAGING_NSO_CONTAINER bash -l -c "ncs_load -l -m devices.xml"
    - docker exec -i $STAGING_NSO_CONTAINER bash -l -c "echo 'devices device * sync-from' | ncs_cli -Cu admin"
    - docker exec -i $STAGING_NSO_CONTAINER bash -l -c "echo 'devices list' | ncs_cli -Cu admin"

(router-rfs)-access-list-router-rfs-ü§ñ:
  stage: test
  when: on_success
  allow_failure: true
  script:
    - echo "(Test ü§ñ) Executing test for access-list-router-rfs"
    - cd tests/access-list-router-rfs/ && robot access-list-router-rfs.robot
    - cd ../../
  artifacts:
    when: always
    paths:
     - $CI_PROJECT_DIR/tests/access-list-router-rfs/log.html

(router-rfs)-line-template-vty-router-rfs-ü§ñ:
  stage: test
  when: on_success
  allow_failure: true
  script:
    - echo "(Test ü§ñ) Executing test for line-template-vty-router-rfs"
    - cd tests/line-template-vty-router-rfs/ && robot line-template-vty-router-rfs.robot
    - cd ../../
  artifacts:
    when: always
    paths:
     - $CI_PROJECT_DIR/tests/line-template-vty-router-rfs/log.html

release-publishing-üì¶:
  stage: deliver
  when: on_success
  script:
    - echo "(Deliver üì¶) Executing packages bundling"
    - mkdir package-artifact
    - ls
    - cd packages && for PACKAGE in *; do docker cp $STAGING_NSO_CONTAINER:/nso/run/packages/$PACKAGE ../package-artifact/; done
    - cd ../package-artifact/ && ls
    - cd .. && tar -czvf nso-packages_$CI_COMMIT_REF_NAME.tar.gz package-artifact/
  artifacts:
    when: always
    paths:
     - $CI_PROJECT_DIR/nso-packages_$CI_COMMIT_REF_NAME.tar.gz

release-git-üì¶:
  stage: deliver
  when: on_success
  only:
    - main
  script:
    - echo "(Deliver üì¶) Creating git release TBD"


deploy-production-üì¨:
  stage: deploy
  when: on_success
  only:
    - main
  script:
    - echo "(Deploy üì¨) Deployment in production"
    - docker exec -i $PRODUCTION_NSO_CONTAINER bash -l -c "mkdir deployments"
    - docker cp nso-packages_$CI_COMMIT_REF_NAME.tar.gz $PRODUCTION_NSO_CONTAINER:/deployments
    - docker exec -i $PRODUCTION_NSO_CONTAINER bash -l -c "cd deployments && tar -xvf nso-packages_$CI_COMMIT_REF_NAME.tar.gz"
    - docker exec -i $PRODUCTION_NSO_CONTAINER bash -l -c "rm -rf nso-packages_$CI_COMMIT_REF_NAME.tar.gz"
    - docker exec -i $PRODUCTION_NSO_CONTAINER bash -l -c "cd /nso/run/packages/ && rm -rf *"
    - docker exec -i $PRODUCTION_NSO_CONTAINER bash -l -c "cp -R /deployments/package-artifact/* /nso/run/packages/"
    - docker exec -i $PRODUCTION_NSO_CONTAINER bash -l -c "echo 'packages reload force' | ncs_cli -Cu admin"
    - docker exec -i $PRODUCTION_NSO_CONTAINER bash -l -c "rm -rf /deployments"

cleanup-failure-üóëÔ∏è:
  stage: cleanup
  when: always
  allow_failure: true
  script:
    - echo "(Cleanup üóëÔ∏è) Deleting NSO container"
    - docker rm -f $STAGING_NSO_CONTAINER

    - echo "(Cleanup üóëÔ∏è) Deleting NETSIM containers"
    - docker rm -f $STAGING_NETSIM_CONTAINER

    - echo "(Cleanup üóëÔ∏è) Deleting docker network"
    - docker network rm nsotestenvnetwork