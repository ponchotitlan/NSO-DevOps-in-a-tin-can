# NSO-DevOps-in-a-tin-can
# Author: @ponchotitlan
# 
# Pipeline definition for gitlab-runner
#
# The pipeline defined in this file aims to provide an example of the workflow for testing and deploying a NSO service package through different configuration means

include:
  - '/pipeline_utils/environments.yml'

variables:
  STAGING_NSO_CONTAINER: '$GITLAB_USER_LOGIN-NSO-$STAGING_NSO_VERSION'
  STAGING_NETSIM_CONTAINER: '$STAGING_NETSIM_PREFIX-1'

stages:
  - build
  - test
  - deliver
  - deploy
  - cleanup

nso-staging-🏗️:
  stage: build
  script:
    - echo "(Build 🏗️) Creating docker network"
    #- docker network create nsotestenvnetwork 

    - echo "(Build 🏗️) Spinning up a NSO container for version v.$STAGING_NSO_VERSION (Docker image $STAGING_NSO_DOCKER_IMAGE)"
    #- docker run -itd --network nsotestenvnetwork --env-file pipeline_utils/nso_setup.list --platform=linux/amd64 -p 8080:80 --name $STAGING_NSO_CONTAINER $STAGING_NSO_DOCKER_IMAGE
    #- sleep 30

packages-staging-🏗️:
  stage: build
  script:
    - echo "(Build 🏗️) Loading and compiling packages in the NSO container"
    #- cd packages && for PACKAGE in *; do docker cp $PACKAGE $STAGING_NSO_CONTAINER:/nso/run/packages; done
    #- cd ..

    - echo "(Build 🏗️) Executing packages reload in the NSO container"
    #- cd packages && for PACKAGE in *; do docker exec -i $STAGING_NSO_CONTAINER bash -l -c "cd /nso/run/packages/$PACKAGE/src/ && make clean all"; done
    #- cd ..
    #- docker exec -i $STAGING_NSO_CONTAINER bash -l -c "echo 'packages reload' | ncs_cli -Cu admin"

testbed-staging-🏗️:
  stage: build
  script:
    - echo "(Build 🏗️) Loading authgroups for netsims in the NSO container"
    #- docker cp pipeline_utils/netsim_authgroup.xml $STAGING_NSO_CONTAINER:/
    #- docker exec -i $STAGING_NSO_CONTAINER bash -l -c "ncs_load -l -m netsim_authgroup.xml"

    - echo "(Build 🏗️) Spinning up a NETSIM container (Docker image $STAGING_NETSIM_DOCKER_IMAGE)"
    #- docker run -td --network-alias $STAGING_NETSIM_CONTAINER --hostname $STAGING_NETSIM_CONTAINER --platform=linux/amd64 -p 222:22 --network nsotestenvnetwork --name $STAGING_NETSIM_CONTAINER $STAGING_NETSIM_DOCKER_IMAGE
    - echo "(Build 🏗️) Waiting for the NETSIM container to initialize ..."
    #- sleep 30

    - echo "(Build 🏗️) Generating NETSIM configurations xml"
    #- docker exec -i $STAGING_NETSIM_CONTAINER bash -l -c "cd /opt/ncs/current/ && ncs-netsim ncs-xml-init > devices.xml"
    #- docker cp $STAGING_NETSIM_CONTAINER:/opt/ncs/current/devices.xml .
    #- NETSIM_IP=$(docker inspect -f '{{ .NetworkSettings.Networks.nsotestenvnetwork.IPAddress}}' $STAGING_NETSIM_CONTAINER)
    #- xmlstarlet edit --inplace -N x=http://tail-f.com/ns/ncs --update '/x:devices/x:device/x:address' --value $NETSIM_IP devices.xml

    - echo "(Build 🏗️) Loading NETSIM configurations xml in the NSO container"
    #- docker cp devices.xml $STAGING_NSO_CONTAINER:/

    - echo "(Build 🏗️) Onboarding test devices in the NSO container"
    #- docker exec -i $STAGING_NSO_CONTAINER bash -l -c "ncs_load -l -m devices.xml"
    #- docker exec -i $STAGING_NSO_CONTAINER bash -l -c "echo 'devices device * sync-from' | ncs_cli -Cu admin"
    #- docker exec -i $STAGING_NSO_CONTAINER bash -l -c "echo 'devices list' | ncs_cli -Cu admin"

(router-rfs)-access-list-router-rfs-🤖:
  stage: test
  script:
    - echo "(Test 🤖) Executing test for access-list-router-rfs"
    - cd tests/access-list-router-rfs/ && robot access-list-router-rfs.robot
    - cd ../../
  artifacts:
    when: always
    paths:
     - $CI_PROJECT_DIR/tests/access-list-router-rfs/log.html

(router-rfs)-🤖:
  stage: test
  script:
    - echo "(Test 🤖) Executing test 2"

release-publishing-📦:
  stage: deliver
  script:
    - echo "(Deliver 📦) Executing releasing"

deploy-production-📬:
  stage: deploy
  script:
    - echo "(Deploy 📬) Deployment in production"

cleanup-🗑️:
  stage: cleanup
  script:
    - echo "(Cleanup 🗑️) Deleting NSO container"
    - echo "(Cleanup 🗑️) Deleting NETSIM containers"
    - echo "(Cleanup 🗑️) Deleting docker network"
    #- docker network rm nsotestenvnetwork